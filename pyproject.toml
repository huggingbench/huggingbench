[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "huggingbench"
description = "Benchmark hugginfface models in different formats such and configs in Triton Inference Server"
readme = "README.md"
requires-python = ">=3.9"
keywords = ["HuggingFace", "Performance Benchmark", "ML model"]
license = {text = "Apache 2.0 License"}
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
]
dependencies = [
        'tritonclient[all]==2.33.0',
        'prometheus-client==0.16.0',
        'docker==6.1.2',
        'datasets==2.12.0',
        'transformers==4.29.2',
        'numpy==1.24.3',  
        'onnx==1.14.0',
        'matplotlib==3.7.1',
        'colored',
        'polygraphy==0.47.1',
        'tabulate==0.9.0',
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
  'black',
  'isort',
  'autoflake',
]

tests = [
  'pytest==7.3.2',
]

[project.scripts]
hbench = "bench.cli:hbench"

[tool.setuptools.packages.find]
where = ["src"]
include = ["client", "server", "bench", "plugins"]
namespaces = false

[tool.black]
line-length = 120
target-version = ['py39']

[tool.isort]
profile = "black"
                                                                                                    
[tool.autoflake]
# return error code if changes are needed
check = false
# make changes to files instead of printing diffs
in-place = true
# drill down directories recursively
recursive = true
# exclude file/directory names that match these comma-separated globs
# exclude = "<GLOBS>"
# by default, only unused standard library imports are removed; specify a comma-separated list of additional
# modules/packages
# imports = "<IMPORTS>"
# expand wildcard star imports with undefined names; this only triggers if there is only one star import in
# the file; this is skipped if there are any uses of `__all__` or `del` in the file
expand-star-imports = true
# remove all unused imports (not just those from the standard library)
remove-all-unused-imports = true
# exclude __init__.py when removing unused imports
ignore-init-module-imports = true
# remove unused variables
remove-unused-variables = true
